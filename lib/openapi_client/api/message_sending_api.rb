=begin
#WhatsAPI Go

#The V2 of WhatsAPI Go

The version of the OpenAPI document: 2.0
Contact: manjit@sponsorbook.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class MessageSendingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send raw audio.
    # Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_audio_request [SendAudioRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def send_audio(instance_key, to, send_audio_request, opts = {})
      data, _status_code, _headers = send_audio_with_http_info(instance_key, to, send_audio_request, opts)
      data
    end

    # Send raw audio.
    # Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_audio_request [SendAudioRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_audio_with_http_info(instance_key, to, send_audio_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_audio ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_audio"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.send_audio"
      end
      # verify the required parameter 'send_audio_request' is set
      if @api_client.config.client_side_validation && send_audio_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_audio_request' when calling MessageSendingApi.send_audio"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/audio'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_audio_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a button message.
    # Sends an interactive button message to the given user. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_button_message(instance_key, data, opts = {})
      data, _status_code, _headers = send_button_message_with_http_info(instance_key, data, opts)
      data
    end

    # Send a button message.
    # Sends an interactive button message to the given user. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_button_message_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_button_message ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_button_message"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_button_message"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/buttons'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_button_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_button_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a button message with a media header.
    # Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessageWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_button_with_media(instance_key, data, opts = {})
      data, _status_code, _headers = send_button_with_media_with_http_info(instance_key, data, opts)
      data
    end

    # Send a button message with a media header.
    # Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessageWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_button_with_media_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_button_with_media ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_button_with_media"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_button_with_media"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/button-media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_button_with_media",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_button_with_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a contact message.
    # Sends a contact (vcard) message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ContactMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_contact(instance_key, data, opts = {})
      data, _status_code, _headers = send_contact_with_http_info(instance_key, data, opts)
      data
    end

    # Send a contact message.
    # Sends a contact (vcard) message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ContactMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_contact_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_contact ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_contact"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_contact"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/contact'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw document.
    # Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_document_request [SendDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def send_document(instance_key, to, send_document_request, opts = {})
      data, _status_code, _headers = send_document_with_http_info(instance_key, to, send_document_request, opts)
      data
    end

    # Send raw document.
    # Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_document_request [SendDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_document_with_http_info(instance_key, to, send_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_document ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_document"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.send_document"
      end
      # verify the required parameter 'send_document_request' is set
      if @api_client.config.client_side_validation && send_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_document_request' when calling MessageSendingApi.send_document"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/document'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a group invite message
    # Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
    # @param instance_key [String] Instance key
    # @param data [GroupInviteMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_group_invite(instance_key, data, opts = {})
      data, _status_code, _headers = send_group_invite_with_http_info(instance_key, data, opts)
      data
    end

    # Send a group invite message
    # Sends a group invite message to the specified number. Don&#39;t include \&quot;https://chat.whatsapp.com/\&quot; in the invite code.
    # @param instance_key [String] Instance key
    # @param data [GroupInviteMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_group_invite_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_group_invite ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_group_invite"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_group_invite"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/group-invite'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_group_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_group_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw image.
    # Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param update_profile_pic_request [UpdateProfilePicRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def send_image(instance_key, to, update_profile_pic_request, opts = {})
      data, _status_code, _headers = send_image_with_http_info(instance_key, to, update_profile_pic_request, opts)
      data
    end

    # Send raw image.
    # Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param update_profile_pic_request [UpdateProfilePicRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_image_with_http_info(instance_key, to, update_profile_pic_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_image ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_image"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.send_image"
      end
      # verify the required parameter 'update_profile_pic_request' is set
      if @api_client.config.client_side_validation && update_profile_pic_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_profile_pic_request' when calling MessageSendingApi.send_image"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/image'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_profile_pic_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a List message.
    # Sends an interactive List message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ListMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_list_message(instance_key, data, opts = {})
      data, _status_code, _headers = send_list_message_with_http_info(instance_key, data, opts)
      data
    end

    # Send a List message.
    # Sends an interactive List message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ListMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_list_message_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_list_message ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_list_message"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_list_message"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/list'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_list_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_list_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a location message.
    # Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
    # @param instance_key [String] Instance key
    # @param data [LocationMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_location(instance_key, data, opts = {})
      data, _status_code, _headers = send_location_with_http_info(instance_key, data, opts)
      data
    end

    # Send a location message.
    # Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
    # @param instance_key [String] Instance key
    # @param data [LocationMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_location_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_location ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_location"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_location"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/location'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a media message.
    # Sends a media message to the given user.
    # @param instance_key [String] Instance key
    # @param data [SendMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_media_message(instance_key, data, opts = {})
      data, _status_code, _headers = send_media_message_with_http_info(instance_key, data, opts)
      data
    end

    # Send a media message.
    # Sends a media message to the given user.
    # @param instance_key [String] Instance key
    # @param data [SendMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_media_message_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_media_message ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_media_message"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_media_message"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_media_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_media_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a Poll message.
    # Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
    # @param instance_key [String] Instance key
    # @param data [PollMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_poll_message(instance_key, data, opts = {})
      data, _status_code, _headers = send_poll_message_with_http_info(instance_key, data, opts)
      data
    end

    # Send a Poll message.
    # Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
    # @param instance_key [String] Instance key
    # @param data [PollMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_poll_message_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_poll_message ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_poll_message"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_poll_message"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/poll'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_poll_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_poll_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template message.
    # Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_template(instance_key, data, opts = {})
      data, _status_code, _headers = send_template_with_http_info(instance_key, data, opts)
      data
    end

    # Send a template message.
    # Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_template_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_template ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_template"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_template"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/template'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template message with media.
    # Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_template_with_media(instance_key, data, opts = {})
      data, _status_code, _headers = send_template_with_media_with_http_info(instance_key, data, opts)
      data
    end

    # Send a template message with media.
    # Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_template_with_media_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_template_with_media ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_template_with_media"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_template_with_media"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/template-media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_template_with_media",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_template_with_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a text message.
    # Sends a text message to the given user.
    # @param instance_key [String] Instance key
    # @param data [TextMessage] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def send_text_message(instance_key, data, opts = {})
      data, _status_code, _headers = send_text_message_with_http_info(instance_key, data, opts)
      data
    end

    # Send a text message.
    # Sends a text message to the given user.
    # @param instance_key [String] Instance key
    # @param data [TextMessage] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_text_message_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_text_message ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_text_message"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.send_text_message"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/text'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_text_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_text_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw video.
    # Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_video_request [SendVideoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def send_video(instance_key, to, send_video_request, opts = {})
      data, _status_code, _headers = send_video_with_http_info(instance_key, to, send_video_request, opts)
      data
    end

    # Send raw video.
    # Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param send_video_request [SendVideoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def send_video_with_http_info(instance_key, to, send_video_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.send_video ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.send_video"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.send_video"
      end
      # verify the required parameter 'send_video_request' is set
      if @api_client.config.client_side_validation && send_video_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_video_request' when calling MessageSendingApi.send_video"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/video'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_video_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.send_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#send_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload media.
    # Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
    # @param instance_key [String] Instance key
    # @param type [String] Media type
    # @param upload_media_request [UploadMediaRequest] 
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def upload_media(instance_key, type, upload_media_request, opts = {})
      data, _status_code, _headers = upload_media_with_http_info(instance_key, type, upload_media_request, opts)
      data
    end

    # Upload media.
    # Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
    # @param instance_key [String] Instance key
    # @param type [String] Media type
    # @param upload_media_request [UploadMediaRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def upload_media_with_http_info(instance_key, type, upload_media_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.upload_media ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.upload_media"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling MessageSendingApi.upload_media"
      end
      # verify enum value
      allowable_values = ["image", "video", "audio", "document"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'upload_media_request' is set
      if @api_client.config.client_side_validation && upload_media_request.nil?
        fail ArgumentError, "Missing the required parameter 'upload_media_request' when calling MessageSendingApi.upload_media"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/upload'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_media_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.upload_media",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#upload_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
