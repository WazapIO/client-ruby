=begin
#WhatsAPI Go

#The V2 of WhatsAPI Go

The version of the OpenAPI document: 2.0
Contact: manjit@sponsorbook.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class MessageSendingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send raw audio.
    # Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_audio_post_request [InstancesInstanceKeySendAudioPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def instances_instance_key_send_audio_post(instance_key, to, instances_instance_key_send_audio_post_request, opts = {})
      data, _status_code, _headers = instances_instance_key_send_audio_post_with_http_info(instance_key, to, instances_instance_key_send_audio_post_request, opts)
      data
    end

    # Send raw audio.
    # Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_audio_post_request [InstancesInstanceKeySendAudioPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_audio_post_with_http_info(instance_key, to, instances_instance_key_send_audio_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_audio_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_audio_post"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.instances_instance_key_send_audio_post"
      end
      # verify the required parameter 'instances_instance_key_send_audio_post_request' is set
      if @api_client.config.client_side_validation && instances_instance_key_send_audio_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'instances_instance_key_send_audio_post_request' when calling MessageSendingApi.instances_instance_key_send_audio_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/audio'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(instances_instance_key_send_audio_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_audio_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_audio_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a button message with a media header.
    # Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessageWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_button_media_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_button_media_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a button message with a media header.
    # Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessageWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_button_media_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_button_media_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_button_media_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_button_media_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/button-media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_button_media_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_button_media_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a button message.
    # Sends an interactive button message to the given user. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_buttons_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_buttons_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a button message.
    # Sends an interactive button message to the given user. Make sure that all the button ids are unique
    # @param instance_key [String] Instance key
    # @param data [ButtonMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_buttons_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_buttons_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_buttons_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_buttons_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/buttons'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_buttons_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_buttons_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a contact message.
    # Sends a contact (vcard) message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ContactMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_contact_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_contact_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a contact message.
    # Sends a contact (vcard) message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ContactMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_contact_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_contact_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_contact_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_contact_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/contact'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_contact_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_contact_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw document.
    # Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_document_post_request [InstancesInstanceKeySendDocumentPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def instances_instance_key_send_document_post(instance_key, to, instances_instance_key_send_document_post_request, opts = {})
      data, _status_code, _headers = instances_instance_key_send_document_post_with_http_info(instance_key, to, instances_instance_key_send_document_post_request, opts)
      data
    end

    # Send raw document.
    # Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_document_post_request [InstancesInstanceKeySendDocumentPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_document_post_with_http_info(instance_key, to, instances_instance_key_send_document_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_document_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_document_post"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.instances_instance_key_send_document_post"
      end
      # verify the required parameter 'instances_instance_key_send_document_post_request' is set
      if @api_client.config.client_side_validation && instances_instance_key_send_document_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'instances_instance_key_send_document_post_request' when calling MessageSendingApi.instances_instance_key_send_document_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/document'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(instances_instance_key_send_document_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_document_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_document_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw image.
    # Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_image_post_request [InstancesInstanceKeySendImagePostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def instances_instance_key_send_image_post(instance_key, to, instances_instance_key_send_image_post_request, opts = {})
      data, _status_code, _headers = instances_instance_key_send_image_post_with_http_info(instance_key, to, instances_instance_key_send_image_post_request, opts)
      data
    end

    # Send raw image.
    # Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_image_post_request [InstancesInstanceKeySendImagePostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_image_post_with_http_info(instance_key, to, instances_instance_key_send_image_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_image_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_image_post"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.instances_instance_key_send_image_post"
      end
      # verify the required parameter 'instances_instance_key_send_image_post_request' is set
      if @api_client.config.client_side_validation && instances_instance_key_send_image_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'instances_instance_key_send_image_post_request' when calling MessageSendingApi.instances_instance_key_send_image_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/image'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(instances_instance_key_send_image_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_image_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_image_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a List message.
    # Sends an interactive List message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ListMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_list_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_list_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a List message.
    # Sends an interactive List message to the given user.
    # @param instance_key [String] Instance key
    # @param data [ListMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_list_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_list_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_list_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_list_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/list'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a location message.
    # Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
    # @param instance_key [String] Instance key
    # @param data [LocationMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_location_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_location_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a location message.
    # Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
    # @param instance_key [String] Instance key
    # @param data [LocationMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_location_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_location_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_location_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_location_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/location'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_location_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_location_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a media message.
    # Sends a media message to the given user.
    # @param instance_key [String] Instance key
    # @param data [SendMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_media_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_media_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a media message.
    # Sends a media message to the given user.
    # @param instance_key [String] Instance key
    # @param data [SendMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_media_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_media_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_media_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_media_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_media_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_media_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a Poll message.
    # Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
    # @param instance_key [String] Instance key
    # @param data [PollMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_poll_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_poll_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a Poll message.
    # Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
    # @param instance_key [String] Instance key
    # @param data [PollMessagePayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_poll_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_poll_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_poll_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_poll_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/poll'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_poll_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_poll_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template message with media.
    # Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_template_media_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_template_media_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a template message with media.
    # Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonWithMediaPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_template_media_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_template_media_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_template_media_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_template_media_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/template-media'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_template_media_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_template_media_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a template message.
    # Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_template_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_template_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a template message.
    # Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
    # @param instance_key [String] Instance key
    # @param data [TemplateButtonPayload] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_template_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_template_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_template_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_template_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/template'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_template_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_template_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a text message.
    # Sends a text message to the given user.
    # @param instance_key [String] Instance key
    # @param data [TextMessage] Message data
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_text_post(instance_key, data, opts = {})
      data, _status_code, _headers = instances_instance_key_send_text_post_with_http_info(instance_key, data, opts)
      data
    end

    # Send a text message.
    # Sends a text message to the given user.
    # @param instance_key [String] Instance key
    # @param data [TextMessage] Message data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_text_post_with_http_info(instance_key, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_text_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_text_post"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling MessageSendingApi.instances_instance_key_send_text_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/text'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_text_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_text_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload media.
    # Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
    # @param instance_key [String] Instance key
    # @param type [String] Media type
    # @param instances_instance_key_send_upload_post_request [InstancesInstanceKeySendUploadPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [APIResponse]
    def instances_instance_key_send_upload_post(instance_key, type, instances_instance_key_send_upload_post_request, opts = {})
      data, _status_code, _headers = instances_instance_key_send_upload_post_with_http_info(instance_key, type, instances_instance_key_send_upload_post_request, opts)
      data
    end

    # Upload media.
    # Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
    # @param instance_key [String] Instance key
    # @param type [String] Media type
    # @param instances_instance_key_send_upload_post_request [InstancesInstanceKeySendUploadPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_upload_post_with_http_info(instance_key, type, instances_instance_key_send_upload_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_upload_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_upload_post"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling MessageSendingApi.instances_instance_key_send_upload_post"
      end
      # verify enum value
      allowable_values = ["image", "video", "audio", "document"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instances_instance_key_send_upload_post_request' is set
      if @api_client.config.client_side_validation && instances_instance_key_send_upload_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'instances_instance_key_send_upload_post_request' when calling MessageSendingApi.instances_instance_key_send_upload_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/upload'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(instances_instance_key_send_upload_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_upload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send raw video.
    # Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_video_post_request [InstancesInstanceKeySendVideoPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [APIResponse]
    def instances_instance_key_send_video_post(instance_key, to, instances_instance_key_send_video_post_request, opts = {})
      data, _status_code, _headers = instances_instance_key_send_video_post_with_http_info(instance_key, to, instances_instance_key_send_video_post_request, opts)
      data
    end

    # Send raw video.
    # Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
    # @param instance_key [String] Instance key
    # @param to [String] The recipient&#39;s number
    # @param instances_instance_key_send_video_post_request [InstancesInstanceKeySendVideoPostRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :caption Attached caption
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def instances_instance_key_send_video_post_with_http_info(instance_key, to, instances_instance_key_send_video_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageSendingApi.instances_instance_key_send_video_post ...'
      end
      # verify the required parameter 'instance_key' is set
      if @api_client.config.client_side_validation && instance_key.nil?
        fail ArgumentError, "Missing the required parameter 'instance_key' when calling MessageSendingApi.instances_instance_key_send_video_post"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessageSendingApi.instances_instance_key_send_video_post"
      end
      # verify the required parameter 'instances_instance_key_send_video_post_request' is set
      if @api_client.config.client_side_validation && instances_instance_key_send_video_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'instances_instance_key_send_video_post_request' when calling MessageSendingApi.instances_instance_key_send_video_post"
      end
      # resource path
      local_var_path = '/instances/{instance_key}/send/video'.sub('{' + 'instance_key' + '}', CGI.escape(instance_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = to
      query_params[:'caption'] = opts[:'caption'] if !opts[:'caption'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(instances_instance_key_send_video_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"MessageSendingApi.instances_instance_key_send_video_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageSendingApi#instances_instance_key_send_video_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
